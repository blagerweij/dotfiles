/*
initscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.liftric.dependency-track-companion-plugin:com.liftric.dependency-track-companion-plugin.gradle.plugin:1.4.0"
        classpath "org.cyclonedx.bom:org.cyclonedx.bom.gradle.plugin:2.2.0"
        classpath "org.cyclonedx:cyclonedx-gradle-plugin:2.2.0"
    }
}
*/
allprojects {
/*
    apply plugin: 'java' 
    apply plugin: org.cyclonedx.gradle.CycloneDxPlugin //  id: 'org.cyclonedx.bom'
    apply plugin: com.liftric.dtcp.DepTrackCompanionPlugin
    cyclonedxBom {
        destination = file("build/reports")
        outputName = "bom"
        outputFormat = "json"
    }

    dependencyTrackCompanion {
        url = "https://dependencytrack.ken-test.mtiba.dev"
        apiKey = "odt_F885KPTt_r9mM8uoCwwimZbb9vhl4srgUcSNYYJj2"
        autoCreate = true
        projectName = project.name
        projectVersion = project.version
        parentName = 'carepay'
    }
*/

    afterEvaluate {
        def dcExt = getExtensions().findByName('dockerCompose')
        if (dcExt) {
            dcExt.stopContainers = false
            dcExt.noRecreate = true
            dcExt.executable.set("/opt/homebrew/bin/docker-compose")
            dcExt.dockerExecutable.set("/opt/homebrew/bin/docker")
            logger.info("'stopContainers' property of 'dockerCompose' extension set to 'false' from 'init.gradle' script")
        }
    }

    beforeEvaluate {
        // hack to silence AWS SDK profile warnings
        def ctx = org.slf4j.LoggerFactory.getILoggerFactory()
        try {
            def f = ctx.class.getDeclaredField('loggers')
            f.setAccessible(true)
            def loggers = f.get(ctx)
            def noop = loggers['org.apache.http.headers']
            loggers['com.amazonaws.auth.profile.internal.BasicProfileConfigLoader'] = noop
            loggers['software.amazon.awssdk.profiles.internal.ProfileFileReader'] = noop
        } catch (Exception e) {}
    }
}
